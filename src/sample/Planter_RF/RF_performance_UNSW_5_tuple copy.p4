########################################################################
# THIS FILE IS PART OF Planter PROJECT
# Copyright (c) Changgang Zheng and Computing Infrastructure Group
# Department of Engineering Science, University of Oxford
# All rights reserved.
# E-mail: changgang.zheng@eng.ox.ac.uk or changgangzheng@qq.com
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at :
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#########################################################################
# This file was autogenerated

/*
 * Planter
 *
 * This program implements a simple protocol. It can be carried over Ethernet
 * (Ethertype 0x1234).
 *
 * The Protocol header looks like this:
 *
 *        0                1                  2              3
 * +----------------+----------------+----------------+---------------+
 * |      P         |       4        |     Version    |     Type      |
 * +----------------+----------------+----------------+---------------+
 * |                              feature0                            |
 * +----------------+----------------+----------------+---------------+
 * |                              feature1                            |
 * +----------------+----------------+----------------+---------------+
 * |                              feature2                            |
 * +----------------+----------------+----------------+---------------+
 * |                              feature3                            |
 * +----------------+----------------+----------------+---------------+
 * |                              feature4                            |
 * +----------------+----------------+----------------+---------------+
 * |                              Result                              |
 * +----------------+----------------+----------------+---------------+
 *
 * P is an ASCII Letter 'P' (0x50)
 * 4 is an ASCII Letter '4' (0x34)
 * Version is currently 1 (0x01)
 * Type is currently 1 (0x01)
 *
 * The device receives a packet, do the classification, fills in the
 * result and sends the packet back out of the same port it came in on, while
 * swapping the source and destination addresses.
 *
 * If an unknown operation is specified or the header is not valid, the packet
 * is dropped
 */

#define CLASS_NOT_SET 10

#include <core.p4>
#include <tna.p4>

/*************************************************************************
*********************** headers and metadata******************************
*************************************************************************/

const bit<16> ETHERTYPE_Planter = 0x1234;
const bit<8>  Planter_P     = 0x50;   // 'P'
const bit<8>  Planter_4     = 0x34;   // '4'
const bit<8>  Planter_VER   = 0x01;   // v0.1

header ethernet_h {
    bit<48> dstAddr;
    bit<48> srcAddr;
    bit<16> etherType;
}

header Planter_h{
    bit<8> p;
    bit<8> four;
    bit<8> ver;
    bit<8> typ;
    bit<32> feature0;
    bit<32> feature1;
    bit<32> feature2;
    bit<32> feature3;
    bit<32> feature4;
    bit<32> result;
}

struct header_t {
    ethernet_h   ethernet;
    Planter_h    Planter;
}

struct metadata_t {
    bit<16> tree_1_vote;
    bit<16> tree_2_vote;
    bit<16> tree_3_vote;
    bit<16> tree_4_vote;
    bit<16> tree_5_vote;
    bit<16> tree_6_vote;
    bit<16> tree_7_vote;
    bit<16> tree_8_vote;
    bit<16> tree_9_vote;
    bit<16> node_id1;
    bit<16> prevFeature1;
    bit<16> isTrue1;
    bit<32> th1;
    bit<16> node_id2;
    bit<16> prevFeature2;
    bit<16> isTrue2;
    bit<32> th2;
    bit<16> node_id3;
    bit<16> prevFeature3;
    bit<16> isTrue3;
    bit<32> th3;
    bit<16> node_id4;
    bit<16> prevFeature4;
    bit<16> isTrue4;
    bit<32> th4;
    bit<16> node_id5;
    bit<16> prevFeature5;
    bit<16> isTrue5;
    bit<32> th5;
    bit<16> node_id6;
    bit<16> prevFeature6;
    bit<16> isTrue6;
    bit<32> th6;
    bit<16> node_id7;
    bit<16> prevFeature7;
    bit<16> isTrue7;
    bit<32> th7;
    bit<16> node_id8;
    bit<16> prevFeature8;
    bit<16> isTrue8;
    bit<32> th8;
    bit<16> node_id9;
    bit<16> prevFeature9;
    bit<16> isTrue9;
    bit<32> th9;
    bit<32>  DstAddr;
    bit<32> feature0;
    bit<32> feature1;
    bit<32> feature2;
    bit<32> feature3;
    bit<32> feature4;
    bit<32> result;
    bit<8> flag ;
}

/*************************************************************************
*********************** Ingress Parser ***********************************
*************************************************************************/

parser SwitchIngressParser(
    packet_in pkt,
    out header_t hdr,
    out metadata_t meta,
    out ingress_intrinsic_metadata_t ig_intr_md) {

    state start {
        pkt.extract(ig_intr_md);
        pkt.advance(PORT_METADATA_SIZE);
        transition parse_ethernet;
    }

    state parse_ethernet {
        pkt.extract(hdr.ethernet);
        transition select(hdr.ethernet.etherType) {
        ETHERTYPE_Planter : check_planter_version;
        default           : accept;
        }
    }

    state check_planter_version {
        transition select(pkt.lookahead<Planter_h>().p,
                          pkt.lookahead<Planter_h>().four,
                          pkt.lookahead<Planter_h>().ver) {
        (Planter_P, Planter_4, Planter_VER) : parse_planter;
        default                             : accept;
        }
    }

    state parse_planter {
        pkt.extract(hdr.Planter);
        meta.feature0 = hdr.Planter.feature0;
        meta.feature1 = hdr.Planter.feature1;
        meta.feature2 = hdr.Planter.feature2;
        meta.feature3 = hdr.Planter.feature3;
        meta.feature4 = hdr.Planter.feature4;
        meta.flag = 1 ;
        transition accept;
    }
}

/*************************************************************************
*********************** Ingress Deparser *********************************
**************************************************************************/

control SwitchIngressDeparser(
    packet_out pkt,
    inout header_t hdr,
    in metadata_t ig_md,
    in ingress_intrinsic_metadata_for_deparser_t ig_dprsr_md) {
    apply {
        pkt.emit(hdr);
    }
}

/*************************************************************************
*********************** Egress Parser ***********************************
*************************************************************************/

parser SwitchEgressParser(
    packet_in pkt,
    out header_t hdr,
    out metadata_t meta,
    out egress_intrinsic_metadata_t eg_intr_md) {
    state start {
        pkt.extract(eg_intr_md);
        transition accept;
        }

}

/*************************************************************************
*********************** Egress Deparser *********************************
**************************************************************************/

control SwitchEgressDeparser(
    packet_out pkt,
    inout header_t hdr,
    in metadata_t eg_md,
    in egress_intrinsic_metadata_for_deparser_t eg_dprsr_md) {
    apply {
        pkt.emit(hdr);
    }
}

/*************************************************************************
*********************** Ingress Processing********************************
**************************************************************************/

control SwitchIngress(
    inout header_t hdr,
    inout metadata_t meta,
    in ingress_intrinsic_metadata_t ig_intr_md,
    in ingress_intrinsic_metadata_from_parser_t ig_prsr_md,
    inout ingress_intrinsic_metadata_for_deparser_t ig_dprsr_md,
    inout ingress_intrinsic_metadata_for_tm_t ig_tm_md) {

    action drop() {
        ig_dprsr_md.drop_ctl = 0x1;
    }

    action send(PortId_t port) {
        ig_tm_md.ucast_egress_port = port;
    }

    action CheckFeature1_0(bit<16> node_id, bit<32> threshold) {
        meta.th1 = threshold - meta.feature0;
        meta.prevFeature1 = 0;
        meta.node_id1 = node_id;
    }

    action CheckFeature1_1(bit<16> node_id, bit<32> threshold) {
        meta.th1 = threshold - meta.feature1;
        meta.prevFeature1 = 1;
        meta.node_id1 = node_id;
    }

    action CheckFeature1_2(bit<16> node_id, bit<32> threshold) {
        meta.th1 = threshold - meta.feature2;
        meta.prevFeature1 = 2;
        meta.node_id1 = node_id;
    }

    action CheckFeature1_3(bit<16> node_id, bit<32> threshold) {
        meta.th1 = threshold - meta.feature3;
        meta.prevFeature1 = 3;
        meta.node_id1 = node_id;
    }

    action CheckFeature1_4(bit<16> node_id, bit<32> threshold) {
        meta.th1 = threshold - meta.feature4;
        meta.prevFeature1 = 4;
        meta.node_id1 = node_id;
    }

    action CheckFeature2_0(bit<16> node_id, bit<32> threshold) {
        meta.th2 = threshold - meta.feature0;
        meta.prevFeature2 = 0;
        meta.node_id2 = node_id;
    }

    action CheckFeature2_1(bit<16> node_id, bit<32> threshold) {
        meta.th2 = threshold - meta.feature1;
        meta.prevFeature2 = 1;
        meta.node_id2 = node_id;
    }

    action CheckFeature2_2(bit<16> node_id, bit<32> threshold) {
        meta.th2 = threshold - meta.feature2;
        meta.prevFeature2 = 2;
        meta.node_id2 = node_id;
    }

    action CheckFeature2_3(bit<16> node_id, bit<32> threshold) {
        meta.th2 = threshold - meta.feature3;
        meta.prevFeature2 = 3;
        meta.node_id2 = node_id;
    }

    action CheckFeature2_4(bit<16> node_id, bit<32> threshold) {
        meta.th2 = threshold - meta.feature4;
        meta.prevFeature2 = 4;
        meta.node_id2 = node_id;
    }

    action CheckFeature3_0(bit<16> node_id, bit<32> threshold) {
        meta.th3 = threshold - meta.feature0;
        meta.prevFeature3 = 0;
        meta.node_id3 = node_id;
    }

    action CheckFeature3_1(bit<16> node_id, bit<32> threshold) {
        meta.th3 = threshold - meta.feature1;
        meta.prevFeature3 = 1;
        meta.node_id3 = node_id;
    }

    action CheckFeature3_2(bit<16> node_id, bit<32> threshold) {
        meta.th3 = threshold - meta.feature2;
        meta.prevFeature3 = 2;
        meta.node_id3 = node_id;
    }

    action CheckFeature3_3(bit<16> node_id, bit<32> threshold) {
        meta.th3 = threshold - meta.feature3;
        meta.prevFeature3 = 3;
        meta.node_id3 = node_id;
    }

    action CheckFeature3_4(bit<16> node_id, bit<32> threshold) {
        meta.th3 = threshold - meta.feature4;
        meta.prevFeature3 = 4;
        meta.node_id3 = node_id;
    }

    action CheckFeature4_0(bit<16> node_id, bit<32> threshold) {
        meta.th4 = threshold - meta.feature0;
        meta.prevFeature4 = 0;
        meta.node_id4 = node_id;
    }

    action CheckFeature4_1(bit<16> node_id, bit<32> threshold) {
        meta.th4 = threshold - meta.feature1;
        meta.prevFeature4 = 1;
        meta.node_id4 = node_id;
    }

    action CheckFeature4_2(bit<16> node_id, bit<32> threshold) {
        meta.th4 = threshold - meta.feature2;
        meta.prevFeature4 = 2;
        meta.node_id4 = node_id;
    }

    action CheckFeature4_3(bit<16> node_id, bit<32> threshold) {
        meta.th4 = threshold - meta.feature3;
        meta.prevFeature4 = 3;
        meta.node_id4 = node_id;
    }

    action CheckFeature4_4(bit<16> node_id, bit<32> threshold) {
        meta.th4 = threshold - meta.feature4;
        meta.prevFeature4 = 4;
        meta.node_id4 = node_id;
    }

    action CheckFeature5_0(bit<16> node_id, bit<32> threshold) {
        meta.th5 = threshold - meta.feature0;
        meta.prevFeature5 = 0;
        meta.node_id5 = node_id;
    }

    action CheckFeature5_1(bit<16> node_id, bit<32> threshold) {
        meta.th5 = threshold - meta.feature1;
        meta.prevFeature5 = 1;
        meta.node_id5 = node_id;
    }

    action CheckFeature5_2(bit<16> node_id, bit<32> threshold) {
        meta.th5 = threshold - meta.feature2;
        meta.prevFeature5 = 2;
        meta.node_id5 = node_id;
    }

    action CheckFeature5_3(bit<16> node_id, bit<32> threshold) {
        meta.th5 = threshold - meta.feature3;
        meta.prevFeature5 = 3;
        meta.node_id5 = node_id;
    }

    action CheckFeature5_4(bit<16> node_id, bit<32> threshold) {
        meta.th5 = threshold - meta.feature4;
        meta.prevFeature5 = 4;
        meta.node_id5 = node_id;
    }

    action CheckFeature6_0(bit<16> node_id, bit<32> threshold) {
        meta.th6 = threshold - meta.feature0;
        meta.prevFeature6 = 0;
        meta.node_id6 = node_id;
    }

    action CheckFeature6_1(bit<16> node_id, bit<32> threshold) {
        meta.th6 = threshold - meta.feature1;
        meta.prevFeature6 = 1;
        meta.node_id6 = node_id;
    }

    action CheckFeature6_2(bit<16> node_id, bit<32> threshold) {
        meta.th6 = threshold - meta.feature2;
        meta.prevFeature6 = 2;
        meta.node_id6 = node_id;
    }

    action CheckFeature6_3(bit<16> node_id, bit<32> threshold) {
        meta.th6 = threshold - meta.feature3;
        meta.prevFeature6 = 3;
        meta.node_id6 = node_id;
    }

    action CheckFeature6_4(bit<16> node_id, bit<32> threshold) {
        meta.th6 = threshold - meta.feature4;
        meta.prevFeature6 = 4;
        meta.node_id6 = node_id;
    }

    action CheckFeature7_0(bit<16> node_id, bit<32> threshold) {
        meta.th7 = threshold - meta.feature0;
        meta.prevFeature7 = 0;
        meta.node_id7 = node_id;
    }

    action CheckFeature7_1(bit<16> node_id, bit<32> threshold) {
        meta.th7 = threshold - meta.feature1;
        meta.prevFeature7 = 1;
        meta.node_id7 = node_id;
    }

    action CheckFeature7_2(bit<16> node_id, bit<32> threshold) {
        meta.th7 = threshold - meta.feature2;
        meta.prevFeature7 = 2;
        meta.node_id7 = node_id;
    }

    action CheckFeature7_3(bit<16> node_id, bit<32> threshold) {
        meta.th7 = threshold - meta.feature3;
        meta.prevFeature7 = 3;
        meta.node_id7 = node_id;
    }

    action CheckFeature7_4(bit<16> node_id, bit<32> threshold) {
        meta.th7 = threshold - meta.feature4;
        meta.prevFeature7 = 4;
        meta.node_id7 = node_id;
    }

    action CheckFeature8_0(bit<16> node_id, bit<32> threshold) {
        meta.th8 = threshold - meta.feature0;
        meta.prevFeature8 = 0;
        meta.node_id8 = node_id;
    }

    action CheckFeature8_1(bit<16> node_id, bit<32> threshold) {
        meta.th8 = threshold - meta.feature1;
        meta.prevFeature8 = 1;
        meta.node_id8 = node_id;
    }

    action CheckFeature8_2(bit<16> node_id, bit<32> threshold) {
        meta.th8 = threshold - meta.feature2;
        meta.prevFeature8 = 2;
        meta.node_id8 = node_id;
    }

    action CheckFeature8_3(bit<16> node_id, bit<32> threshold) {
        meta.th8 = threshold - meta.feature3;
        meta.prevFeature8 = 3;
        meta.node_id8 = node_id;
    }

    action CheckFeature8_4(bit<16> node_id, bit<32> threshold) {
        meta.th8 = threshold - meta.feature4;
        meta.prevFeature8 = 4;
        meta.node_id8 = node_id;
    }

    action CheckFeature9_0(bit<16> node_id, bit<32> threshold) {
        meta.th9 = threshold - meta.feature0;
        meta.prevFeature9 = 0;
        meta.node_id9 = node_id;
    }

    action CheckFeature9_1(bit<16> node_id, bit<32> threshold) {
        meta.th9 = threshold - meta.feature1;
        meta.prevFeature9 = 1;
        meta.node_id9 = node_id;
    }

    action CheckFeature9_2(bit<16> node_id, bit<32> threshold) {
        meta.th9 = threshold - meta.feature2;
        meta.prevFeature9 = 2;
        meta.node_id9 = node_id;
    }

    action CheckFeature9_3(bit<16> node_id, bit<32> threshold) {
        meta.th9 = threshold - meta.feature3;
        meta.prevFeature9 = 3;
        meta.node_id9 = node_id;
    }

    action CheckFeature9_4(bit<16> node_id, bit<32> threshold) {
        meta.th9 = threshold - meta.feature4;
        meta.prevFeature9 = 4;
        meta.node_id9 = node_id;
    }

    action SetClass1(bit <16> node_id, bit <16> class ) {
        meta.tree_1_vote = class;
        meta.node_id1 = node_id; // just for debugging otherwise not needed
    }
    action SetClass2(bit <16> node_id, bit <16> class ) {
        meta.tree_2_vote = class;
        meta.node_id2 = node_id; // just for debugging otherwise not needed
    }
    action SetClass3(bit <16> node_id, bit <16> class ) {
        meta.tree_3_vote = class;
        meta.node_id3 = node_id; // just for debugging otherwise not needed
    }
    action SetClass4(bit <16> node_id, bit <16> class ) {
        meta.tree_4_vote = class;
        meta.node_id4 = node_id; // just for debugging otherwise not needed
    }
    action SetClass5(bit <16> node_id, bit <16> class ) {
        meta.tree_5_vote = class;
        meta.node_id5 = node_id; // just for debugging otherwise not needed
    }
    action SetClass6(bit <16> node_id, bit <16> class ) {
        meta.tree_6_vote = class;
        meta.node_id6 = node_id; // just for debugging otherwise not needed
    }
    action SetClass7(bit <16> node_id, bit <16> class ) {
        meta.tree_7_vote = class;
        meta.node_id7 = node_id; // just for debugging otherwise not needed
    }
    action SetClass8(bit <16> node_id, bit <16> class ) {
        meta.tree_8_vote = class;
        meta.node_id8 = node_id; // just for debugging otherwise not needed
    }
    action SetClass9(bit <16> node_id, bit <16> class ) {
        meta.tree_9_vote = class;
        meta.node_id9 = node_id; // just for debugging otherwise not needed
    }
    @pragma stage 1
    table level_1_1{
        key = {
            meta.node_id1: exact;
            meta.prevFeature1: exact;
            meta.isTrue1: exact;
        }
        actions = {
            NoAction;
            CheckFeature1_0;
            CheckFeature1_1;
            CheckFeature1_2;
            CheckFeature1_3;
            CheckFeature1_4;
            SetClass1;
        }
        size = 1024;
    }

    @pragma stage 2
    table level_1_2{
        key = {
            meta.node_id1: exact;
            meta.prevFeature1: exact;
            meta.isTrue1: exact;
        }
        actions = {
            NoAction;
            CheckFeature1_0;
            CheckFeature1_1;
            CheckFeature1_2;
            CheckFeature1_3;
            CheckFeature1_4;
            SetClass1;
        }
        size = 1024;
    }

    @pragma stage 3
    table level_1_3{
        key = {
            meta.node_id1: exact;
            meta.prevFeature1: exact;
            meta.isTrue1: exact;
        }
        actions = {
            NoAction;
            CheckFeature1_0;
            CheckFeature1_1;
            CheckFeature1_2;
            CheckFeature1_3;
            CheckFeature1_4;
            SetClass1;
        }
        size = 1024;
    }

    @pragma stage 4
    table level_1_4{
        key = {
            meta.node_id1: exact;
            meta.prevFeature1: exact;
            meta.isTrue1: exact;
        }
        actions = {
            NoAction;
            CheckFeature1_0;
            CheckFeature1_1;
            CheckFeature1_2;
            CheckFeature1_3;
            CheckFeature1_4;
            SetClass1;
        }
        size = 1024;
    }

    @pragma stage 5
    table level_1_5{
        key = {
            meta.node_id1: exact;
            meta.prevFeature1: exact;
            meta.isTrue1: exact;
        }
        actions = {
            NoAction;
            CheckFeature1_0;
            CheckFeature1_1;
            CheckFeature1_2;
            CheckFeature1_3;
            CheckFeature1_4;
            SetClass1;
        }
        size = 1024;
    }

    @pragma stage 6
    table level_1_6{
        key = {
            meta.node_id1: exact;
            meta.prevFeature1: exact;
            meta.isTrue1: exact;
        }
        actions = {
            NoAction;
            CheckFeature1_0;
            CheckFeature1_1;
            CheckFeature1_2;
            CheckFeature1_3;
            CheckFeature1_4;
            SetClass1;
        }
        size = 1024;
    }

    @pragma stage 1
    table level_2_1{
        key = {
            meta.node_id2: exact;
            meta.prevFeature2: exact;
            meta.isTrue2: exact;
        }
        actions = {
            NoAction;
            CheckFeature2_0;
            CheckFeature2_1;
            CheckFeature2_2;
            CheckFeature2_3;
            CheckFeature2_4;
            SetClass2;
        }
        size = 1024;
    }

    @pragma stage 2
    table level_2_2{
        key = {
            meta.node_id2: exact;
            meta.prevFeature2: exact;
            meta.isTrue2: exact;
        }
        actions = {
            NoAction;
            CheckFeature2_0;
            CheckFeature2_1;
            CheckFeature2_2;
            CheckFeature2_3;
            CheckFeature2_4;
            SetClass2;
        }
        size = 1024;
    }

    @pragma stage 3
    table level_2_3{
        key = {
            meta.node_id2: exact;
            meta.prevFeature2: exact;
            meta.isTrue2: exact;
        }
        actions = {
            NoAction;
            CheckFeature2_0;
            CheckFeature2_1;
            CheckFeature2_2;
            CheckFeature2_3;
            CheckFeature2_4;
            SetClass2;
        }
        size = 1024;
    }

    @pragma stage 4
    table level_2_4{
        key = {
            meta.node_id2: exact;
            meta.prevFeature2: exact;
            meta.isTrue2: exact;
        }
        actions = {
            NoAction;
            CheckFeature2_0;
            CheckFeature2_1;
            CheckFeature2_2;
            CheckFeature2_3;
            CheckFeature2_4;
            SetClass2;
        }
        size = 1024;
    }

    @pragma stage 5
    table level_2_5{
        key = {
            meta.node_id2: exact;
            meta.prevFeature2: exact;
            meta.isTrue2: exact;
        }
        actions = {
            NoAction;
            CheckFeature2_0;
            CheckFeature2_1;
            CheckFeature2_2;
            CheckFeature2_3;
            CheckFeature2_4;
            SetClass2;
        }
        size = 1024;
    }

    @pragma stage 6
    table level_2_6{
        key = {
            meta.node_id2: exact;
            meta.prevFeature2: exact;
            meta.isTrue2: exact;
        }
        actions = {
            NoAction;
            CheckFeature2_0;
            CheckFeature2_1;
            CheckFeature2_2;
            CheckFeature2_3;
            CheckFeature2_4;
            SetClass2;
        }
        size = 1024;
    }

    @pragma stage 1
    table level_3_1{
        key = {
            meta.node_id3: exact;
            meta.prevFeature3: exact;
            meta.isTrue3: exact;
        }
        actions = {
            NoAction;
            CheckFeature3_0;
            CheckFeature3_1;
            CheckFeature3_2;
            CheckFeature3_3;
            CheckFeature3_4;
            SetClass3;
        }
        size = 1024;
    }

    @pragma stage 2
    table level_3_2{
        key = {
            meta.node_id3: exact;
            meta.prevFeature3: exact;
            meta.isTrue3: exact;
        }
        actions = {
            NoAction;
            CheckFeature3_0;
            CheckFeature3_1;
            CheckFeature3_2;
            CheckFeature3_3;
            CheckFeature3_4;
            SetClass3;
        }
        size = 1024;
    }

    @pragma stage 3
    table level_3_3{
        key = {
            meta.node_id3: exact;
            meta.prevFeature3: exact;
            meta.isTrue3: exact;
        }
        actions = {
            NoAction;
            CheckFeature3_0;
            CheckFeature3_1;
            CheckFeature3_2;
            CheckFeature3_3;
            CheckFeature3_4;
            SetClass3;
        }
        size = 1024;
    }

    @pragma stage 4
    table level_3_4{
        key = {
            meta.node_id3: exact;
            meta.prevFeature3: exact;
            meta.isTrue3: exact;
        }
        actions = {
            NoAction;
            CheckFeature3_0;
            CheckFeature3_1;
            CheckFeature3_2;
            CheckFeature3_3;
            CheckFeature3_4;
            SetClass3;
        }
        size = 1024;
    }

    @pragma stage 5
    table level_3_5{
        key = {
            meta.node_id3: exact;
            meta.prevFeature3: exact;
            meta.isTrue3: exact;
        }
        actions = {
            NoAction;
            CheckFeature3_0;
            CheckFeature3_1;
            CheckFeature3_2;
            CheckFeature3_3;
            CheckFeature3_4;
            SetClass3;
        }
        size = 1024;
    }

    @pragma stage 6
    table level_3_6{
        key = {
            meta.node_id3: exact;
            meta.prevFeature3: exact;
            meta.isTrue3: exact;
        }
        actions = {
            NoAction;
            CheckFeature3_0;
            CheckFeature3_1;
            CheckFeature3_2;
            CheckFeature3_3;
            CheckFeature3_4;
            SetClass3;
        }
        size = 1024;
    }

    @pragma stage 1
    table level_4_1{
        key = {
            meta.node_id4: exact;
            meta.prevFeature4: exact;
            meta.isTrue4: exact;
        }
        actions = {
            NoAction;
            CheckFeature4_0;
            CheckFeature4_1;
            CheckFeature4_2;
            CheckFeature4_3;
            CheckFeature4_4;
            SetClass4;
        }
        size = 1024;
    }

    @pragma stage 2
    table level_4_2{
        key = {
            meta.node_id4: exact;
            meta.prevFeature4: exact;
            meta.isTrue4: exact;
        }
        actions = {
            NoAction;
            CheckFeature4_0;
            CheckFeature4_1;
            CheckFeature4_2;
            CheckFeature4_3;
            CheckFeature4_4;
            SetClass4;
        }
        size = 1024;
    }

    @pragma stage 3
    table level_4_3{
        key = {
            meta.node_id4: exact;
            meta.prevFeature4: exact;
            meta.isTrue4: exact;
        }
        actions = {
            NoAction;
            CheckFeature4_0;
            CheckFeature4_1;
            CheckFeature4_2;
            CheckFeature4_3;
            CheckFeature4_4;
            SetClass4;
        }
        size = 1024;
    }

    @pragma stage 4
    table level_4_4{
        key = {
            meta.node_id4: exact;
            meta.prevFeature4: exact;
            meta.isTrue4: exact;
        }
        actions = {
            NoAction;
            CheckFeature4_0;
            CheckFeature4_1;
            CheckFeature4_2;
            CheckFeature4_3;
            CheckFeature4_4;
            SetClass4;
        }
        size = 1024;
    }

    @pragma stage 5
    table level_4_5{
        key = {
            meta.node_id4: exact;
            meta.prevFeature4: exact;
            meta.isTrue4: exact;
        }
        actions = {
            NoAction;
            CheckFeature4_0;
            CheckFeature4_1;
            CheckFeature4_2;
            CheckFeature4_3;
            CheckFeature4_4;
            SetClass4;
        }
        size = 1024;
    }

    @pragma stage 6
    table level_4_6{
        key = {
            meta.node_id4: exact;
            meta.prevFeature4: exact;
            meta.isTrue4: exact;
        }
        actions = {
            NoAction;
            CheckFeature4_0;
            CheckFeature4_1;
            CheckFeature4_2;
            CheckFeature4_3;
            CheckFeature4_4;
            SetClass4;
        }
        size = 1024;
    }

    @pragma stage 1
    table level_5_1{
        key = {
            meta.node_id5: exact;
            meta.prevFeature5: exact;
            meta.isTrue5: exact;
        }
        actions = {
            NoAction;
            CheckFeature5_0;
            CheckFeature5_1;
            CheckFeature5_2;
            CheckFeature5_3;
            CheckFeature5_4;
            SetClass5;
        }
        size = 1024;
    }

    @pragma stage 2
    table level_5_2{
        key = {
            meta.node_id5: exact;
            meta.prevFeature5: exact;
            meta.isTrue5: exact;
        }
        actions = {
            NoAction;
            CheckFeature5_0;
            CheckFeature5_1;
            CheckFeature5_2;
            CheckFeature5_3;
            CheckFeature5_4;
            SetClass5;
        }
        size = 1024;
    }

    @pragma stage 3
    table level_5_3{
        key = {
            meta.node_id5: exact;
            meta.prevFeature5: exact;
            meta.isTrue5: exact;
        }
        actions = {
            NoAction;
            CheckFeature5_0;
            CheckFeature5_1;
            CheckFeature5_2;
            CheckFeature5_3;
            CheckFeature5_4;
            SetClass5;
        }
        size = 1024;
    }

    @pragma stage 4
    table level_5_4{
        key = {
            meta.node_id5: exact;
            meta.prevFeature5: exact;
            meta.isTrue5: exact;
        }
        actions = {
            NoAction;
            CheckFeature5_0;
            CheckFeature5_1;
            CheckFeature5_2;
            CheckFeature5_3;
            CheckFeature5_4;
            SetClass5;
        }
        size = 1024;
    }

    @pragma stage 5
    table level_5_5{
        key = {
            meta.node_id5: exact;
            meta.prevFeature5: exact;
            meta.isTrue5: exact;
        }
        actions = {
            NoAction;
            CheckFeature5_0;
            CheckFeature5_1;
            CheckFeature5_2;
            CheckFeature5_3;
            CheckFeature5_4;
            SetClass5;
        }
        size = 1024;
    }

    @pragma stage 6
    table level_5_6{
        key = {
            meta.node_id5: exact;
            meta.prevFeature5: exact;
            meta.isTrue5: exact;
        }
        actions = {
            NoAction;
            CheckFeature5_0;
            CheckFeature5_1;
            CheckFeature5_2;
            CheckFeature5_3;
            CheckFeature5_4;
            SetClass5;
        }
        size = 1024;
    }

    @pragma stage 1
    table level_6_1{
        key = {
            meta.node_id6: exact;
            meta.prevFeature6: exact;
            meta.isTrue6: exact;
        }
        actions = {
            NoAction;
            CheckFeature6_0;
            CheckFeature6_1;
            CheckFeature6_2;
            CheckFeature6_3;
            CheckFeature6_4;
            SetClass6;
        }
        size = 1024;
    }

    @pragma stage 2
    table level_6_2{
        key = {
            meta.node_id6: exact;
            meta.prevFeature6: exact;
            meta.isTrue6: exact;
        }
        actions = {
            NoAction;
            CheckFeature6_0;
            CheckFeature6_1;
            CheckFeature6_2;
            CheckFeature6_3;
            CheckFeature6_4;
            SetClass6;
        }
        size = 1024;
    }

    @pragma stage 3
    table level_6_3{
        key = {
            meta.node_id6: exact;
            meta.prevFeature6: exact;
            meta.isTrue6: exact;
        }
        actions = {
            NoAction;
            CheckFeature6_0;
            CheckFeature6_1;
            CheckFeature6_2;
            CheckFeature6_3;
            CheckFeature6_4;
            SetClass6;
        }
        size = 1024;
    }

    @pragma stage 4
    table level_6_4{
        key = {
            meta.node_id6: exact;
            meta.prevFeature6: exact;
            meta.isTrue6: exact;
        }
        actions = {
            NoAction;
            CheckFeature6_0;
            CheckFeature6_1;
            CheckFeature6_2;
            CheckFeature6_3;
            CheckFeature6_4;
            SetClass6;
        }
        size = 1024;
    }

    @pragma stage 5
    table level_6_5{
        key = {
            meta.node_id6: exact;
            meta.prevFeature6: exact;
            meta.isTrue6: exact;
        }
        actions = {
            NoAction;
            CheckFeature6_0;
            CheckFeature6_1;
            CheckFeature6_2;
            CheckFeature6_3;
            CheckFeature6_4;
            SetClass6;
        }
        size = 1024;
    }

    @pragma stage 6
    table level_6_6{
        key = {
            meta.node_id6: exact;
            meta.prevFeature6: exact;
            meta.isTrue6: exact;
        }
        actions = {
            NoAction;
            CheckFeature6_0;
            CheckFeature6_1;
            CheckFeature6_2;
            CheckFeature6_3;
            CheckFeature6_4;
            SetClass6;
        }
        size = 1024;
    }

    @pragma stage 1
    table level_7_1{
        key = {
            meta.node_id7: exact;
            meta.prevFeature7: exact;
            meta.isTrue7: exact;
        }
        actions = {
            NoAction;
            CheckFeature7_0;
            CheckFeature7_1;
            CheckFeature7_2;
            CheckFeature7_3;
            CheckFeature7_4;
            SetClass7;
        }
        size = 1024;
    }

    @pragma stage 2
    table level_7_2{
        key = {
            meta.node_id7: exact;
            meta.prevFeature7: exact;
            meta.isTrue7: exact;
        }
        actions = {
            NoAction;
            CheckFeature7_0;
            CheckFeature7_1;
            CheckFeature7_2;
            CheckFeature7_3;
            CheckFeature7_4;
            SetClass7;
        }
        size = 1024;
    }

    @pragma stage 3
    table level_7_3{
        key = {
            meta.node_id7: exact;
            meta.prevFeature7: exact;
            meta.isTrue7: exact;
        }
        actions = {
            NoAction;
            CheckFeature7_0;
            CheckFeature7_1;
            CheckFeature7_2;
            CheckFeature7_3;
            CheckFeature7_4;
            SetClass7;
        }
        size = 1024;
    }

    @pragma stage 4
    table level_7_4{
        key = {
            meta.node_id7: exact;
            meta.prevFeature7: exact;
            meta.isTrue7: exact;
        }
        actions = {
            NoAction;
            CheckFeature7_0;
            CheckFeature7_1;
            CheckFeature7_2;
            CheckFeature7_3;
            CheckFeature7_4;
            SetClass7;
        }
        size = 1024;
    }

    @pragma stage 5
    table level_7_5{
        key = {
            meta.node_id7: exact;
            meta.prevFeature7: exact;
            meta.isTrue7: exact;
        }
        actions = {
            NoAction;
            CheckFeature7_0;
            CheckFeature7_1;
            CheckFeature7_2;
            CheckFeature7_3;
            CheckFeature7_4;
            SetClass7;
        }
        size = 1024;
    }

    @pragma stage 6
    table level_7_6{
        key = {
            meta.node_id7: exact;
            meta.prevFeature7: exact;
            meta.isTrue7: exact;
        }
        actions = {
            NoAction;
            CheckFeature7_0;
            CheckFeature7_1;
            CheckFeature7_2;
            CheckFeature7_3;
            CheckFeature7_4;
            SetClass7;
        }
        size = 1024;
    }

    @pragma stage 1
    table level_8_1{
        key = {
            meta.node_id8: exact;
            meta.prevFeature8: exact;
            meta.isTrue8: exact;
        }
        actions = {
            NoAction;
            CheckFeature8_0;
            CheckFeature8_1;
            CheckFeature8_2;
            CheckFeature8_3;
            CheckFeature8_4;
            SetClass8;
        }
        size = 1024;
    }

    @pragma stage 2
    table level_8_2{
        key = {
            meta.node_id8: exact;
            meta.prevFeature8: exact;
            meta.isTrue8: exact;
        }
        actions = {
            NoAction;
            CheckFeature8_0;
            CheckFeature8_1;
            CheckFeature8_2;
            CheckFeature8_3;
            CheckFeature8_4;
            SetClass8;
        }
        size = 1024;
    }

    @pragma stage 3
    table level_8_3{
        key = {
            meta.node_id8: exact;
            meta.prevFeature8: exact;
            meta.isTrue8: exact;
        }
        actions = {
            NoAction;
            CheckFeature8_0;
            CheckFeature8_1;
            CheckFeature8_2;
            CheckFeature8_3;
            CheckFeature8_4;
            SetClass8;
        }
        size = 1024;
    }

    @pragma stage 4
    table level_8_4{
        key = {
            meta.node_id8: exact;
            meta.prevFeature8: exact;
            meta.isTrue8: exact;
        }
        actions = {
            NoAction;
            CheckFeature8_0;
            CheckFeature8_1;
            CheckFeature8_2;
            CheckFeature8_3;
            CheckFeature8_4;
            SetClass8;
        }
        size = 1024;
    }

    @pragma stage 5
    table level_8_5{
        key = {
            meta.node_id8: exact;
            meta.prevFeature8: exact;
            meta.isTrue8: exact;
        }
        actions = {
            NoAction;
            CheckFeature8_0;
            CheckFeature8_1;
            CheckFeature8_2;
            CheckFeature8_3;
            CheckFeature8_4;
            SetClass8;
        }
        size = 1024;
    }

    @pragma stage 6
    table level_8_6{
        key = {
            meta.node_id8: exact;
            meta.prevFeature8: exact;
            meta.isTrue8: exact;
        }
        actions = {
            NoAction;
            CheckFeature8_0;
            CheckFeature8_1;
            CheckFeature8_2;
            CheckFeature8_3;
            CheckFeature8_4;
            SetClass8;
        }
        size = 1024;
    }

    @pragma stage 1
    table level_9_1{
        key = {
            meta.node_id9: exact;
            meta.prevFeature9: exact;
            meta.isTrue9: exact;
        }
        actions = {
            NoAction;
            CheckFeature9_0;
            CheckFeature9_1;
            CheckFeature9_2;
            CheckFeature9_3;
            CheckFeature9_4;
            SetClass9;
        }
        size = 1024;
    }

    @pragma stage 2
    table level_9_2{
        key = {
            meta.node_id9: exact;
            meta.prevFeature9: exact;
            meta.isTrue9: exact;
        }
        actions = {
            NoAction;
            CheckFeature9_0;
            CheckFeature9_1;
            CheckFeature9_2;
            CheckFeature9_3;
            CheckFeature9_4;
            SetClass9;
        }
        size = 1024;
    }

    @pragma stage 3
    table level_9_3{
        key = {
            meta.node_id9: exact;
            meta.prevFeature9: exact;
            meta.isTrue9: exact;
        }
        actions = {
            NoAction;
            CheckFeature9_0;
            CheckFeature9_1;
            CheckFeature9_2;
            CheckFeature9_3;
            CheckFeature9_4;
            SetClass9;
        }
        size = 1024;
    }

    @pragma stage 4
    table level_9_4{
        key = {
            meta.node_id9: exact;
            meta.prevFeature9: exact;
            meta.isTrue9: exact;
        }
        actions = {
            NoAction;
            CheckFeature9_0;
            CheckFeature9_1;
            CheckFeature9_2;
            CheckFeature9_3;
            CheckFeature9_4;
            SetClass9;
        }
        size = 1024;
    }

    @pragma stage 5
    table level_9_5{
        key = {
            meta.node_id9: exact;
            meta.prevFeature9: exact;
            meta.isTrue9: exact;
        }
        actions = {
            NoAction;
            CheckFeature9_0;
            CheckFeature9_1;
            CheckFeature9_2;
            CheckFeature9_3;
            CheckFeature9_4;
            SetClass9;
        }
        size = 1024;
    }

    @pragma stage 6
    table level_9_6{
        key = {
            meta.node_id9: exact;
            meta.prevFeature9: exact;
            meta.isTrue9: exact;
        }
        actions = {
            NoAction;
            CheckFeature9_0;
            CheckFeature9_1;
            CheckFeature9_2;
            CheckFeature9_3;
            CheckFeature9_4;
            SetClass9;
        }
        size = 1024;
    }

    action read_lable(bit<32> label){
        hdr.Planter.result = label;
    }

    action write_default_decision() {
        hdr.Planter.result = 0;
    }

    table decision {
        key = { meta.tree_1_vote:exact;
                meta.tree_2_vote:exact;
                meta.tree_3_vote:exact;
                meta.tree_4_vote:exact;
                meta.tree_5_vote:exact;
                meta.tree_6_vote:exact;
                meta.tree_7_vote:exact;
                meta.tree_8_vote:exact;
                meta.tree_9_vote:exact;
                }
        actions={
            read_lable;
            write_default_decision;
        }
        size = 256;
        default_action = write_default_decision;
    }

    apply{
        meta.tree_1_vote = CLASS_NOT_SET;
        meta.tree_2_vote = CLASS_NOT_SET;
        meta.tree_3_vote = CLASS_NOT_SET;
        meta.tree_4_vote = CLASS_NOT_SET;
        meta.tree_5_vote = CLASS_NOT_SET;
        meta.tree_6_vote = CLASS_NOT_SET;
        meta.tree_7_vote = CLASS_NOT_SET;
        meta.tree_8_vote = CLASS_NOT_SET;
        meta.tree_9_vote = CLASS_NOT_SET;

        meta.node_id1 = 0;
        meta.prevFeature1 = 0;
        meta.isTrue1 = 1;
        level_1_1.apply();
        if (meta.th1 & 0b10000000000000000000000000000000 == 0) meta.isTrue1 = 1;
        else meta.isTrue1 = 0;
        if (meta.tree_1_vote == CLASS_NOT_SET) {
          level_1_2.apply();
          if (meta.th1 & 0b10000000000000000000000000000000 == 0) meta.isTrue1 = 1;
          else meta.isTrue1 = 0;
          if (meta.tree_1_vote == CLASS_NOT_SET) {
            level_1_3.apply();
            if (meta.th1 & 0b10000000000000000000000000000000 == 0) meta.isTrue1 = 1;
            else meta.isTrue1 = 0;
            if (meta.tree_1_vote == CLASS_NOT_SET) {
              level_1_4.apply();
              if (meta.th1 & 0b10000000000000000000000000000000 == 0) meta.isTrue1 = 1;
              else meta.isTrue1 = 0;
              if (meta.tree_1_vote == CLASS_NOT_SET) {
                level_1_5.apply();
                if (meta.th1 & 0b10000000000000000000000000000000 == 0) meta.isTrue1 = 1;
                else meta.isTrue1 = 0;
                if (meta.tree_1_vote == CLASS_NOT_SET) {
                  level_1_6.apply();
        } } } } }

        meta.node_id2 = 31;
        meta.prevFeature2 = 0;
        meta.isTrue2 = 1;
        level_2_1.apply();
        if (meta.th2 & 0b10000000000000000000000000000000 == 0) meta.isTrue2 = 1;
        else meta.isTrue2 = 0;
        if (meta.tree_2_vote == CLASS_NOT_SET) {
          level_2_2.apply();
          if (meta.th2 & 0b10000000000000000000000000000000 == 0) meta.isTrue2 = 1;
          else meta.isTrue2 = 0;
          if (meta.tree_2_vote == CLASS_NOT_SET) {
            level_2_3.apply();
            if (meta.th2 & 0b10000000000000000000000000000000 == 0) meta.isTrue2 = 1;
            else meta.isTrue2 = 0;
            if (meta.tree_2_vote == CLASS_NOT_SET) {
              level_2_4.apply();
              if (meta.th2 & 0b10000000000000000000000000000000 == 0) meta.isTrue2 = 1;
              else meta.isTrue2 = 0;
              if (meta.tree_2_vote == CLASS_NOT_SET) {
                level_2_5.apply();
                if (meta.th2 & 0b10000000000000000000000000000000 == 0) meta.isTrue2 = 1;
                else meta.isTrue2 = 0;
                if (meta.tree_2_vote == CLASS_NOT_SET) {
                  level_2_6.apply();
        } } } } }

        meta.node_id3 = 66;
        meta.prevFeature3 = 0;
        meta.isTrue3 = 1;
        level_3_1.apply();
        if (meta.th3 & 0b10000000000000000000000000000000 == 0) meta.isTrue3 = 1;
        else meta.isTrue3 = 0;
        if (meta.tree_3_vote == CLASS_NOT_SET) {
          level_3_2.apply();
          if (meta.th3 & 0b10000000000000000000000000000000 == 0) meta.isTrue3 = 1;
          else meta.isTrue3 = 0;
          if (meta.tree_3_vote == CLASS_NOT_SET) {
            level_3_3.apply();
            if (meta.th3 & 0b10000000000000000000000000000000 == 0) meta.isTrue3 = 1;
            else meta.isTrue3 = 0;
            if (meta.tree_3_vote == CLASS_NOT_SET) {
              level_3_4.apply();
              if (meta.th3 & 0b10000000000000000000000000000000 == 0) meta.isTrue3 = 1;
              else meta.isTrue3 = 0;
              if (meta.tree_3_vote == CLASS_NOT_SET) {
                level_3_5.apply();
                if (meta.th3 & 0b10000000000000000000000000000000 == 0) meta.isTrue3 = 1;
                else meta.isTrue3 = 0;
                if (meta.tree_3_vote == CLASS_NOT_SET) {
                  level_3_6.apply();
        } } } } }

        meta.node_id4 = 113;
        meta.prevFeature4 = 0;
        meta.isTrue4 = 1;
        level_4_1.apply();
        if (meta.th4 & 0b10000000000000000000000000000000 == 0) meta.isTrue4 = 1;
        else meta.isTrue4 = 0;
        if (meta.tree_4_vote == CLASS_NOT_SET) {
          level_4_2.apply();
          if (meta.th4 & 0b10000000000000000000000000000000 == 0) meta.isTrue4 = 1;
          else meta.isTrue4 = 0;
          if (meta.tree_4_vote == CLASS_NOT_SET) {
            level_4_3.apply();
            if (meta.th4 & 0b10000000000000000000000000000000 == 0) meta.isTrue4 = 1;
            else meta.isTrue4 = 0;
            if (meta.tree_4_vote == CLASS_NOT_SET) {
              level_4_4.apply();
              if (meta.th4 & 0b10000000000000000000000000000000 == 0) meta.isTrue4 = 1;
              else meta.isTrue4 = 0;
              if (meta.tree_4_vote == CLASS_NOT_SET) {
                level_4_5.apply();
                if (meta.th4 & 0b10000000000000000000000000000000 == 0) meta.isTrue4 = 1;
                else meta.isTrue4 = 0;
                if (meta.tree_4_vote == CLASS_NOT_SET) {
                  level_4_6.apply();
        } } } } }

        meta.node_id5 = 146;
        meta.prevFeature5 = 0;
        meta.isTrue5 = 1;
        level_5_1.apply();
        if (meta.th5 & 0b10000000000000000000000000000000 == 0) meta.isTrue5 = 1;
        else meta.isTrue5 = 0;
        if (meta.tree_5_vote == CLASS_NOT_SET) {
          level_5_2.apply();
          if (meta.th5 & 0b10000000000000000000000000000000 == 0) meta.isTrue5 = 1;
          else meta.isTrue5 = 0;
          if (meta.tree_5_vote == CLASS_NOT_SET) {
            level_5_3.apply();
            if (meta.th5 & 0b10000000000000000000000000000000 == 0) meta.isTrue5 = 1;
            else meta.isTrue5 = 0;
            if (meta.tree_5_vote == CLASS_NOT_SET) {
              level_5_4.apply();
              if (meta.th5 & 0b10000000000000000000000000000000 == 0) meta.isTrue5 = 1;
              else meta.isTrue5 = 0;
              if (meta.tree_5_vote == CLASS_NOT_SET) {
                level_5_5.apply();
                if (meta.th5 & 0b10000000000000000000000000000000 == 0) meta.isTrue5 = 1;
                else meta.isTrue5 = 0;
                if (meta.tree_5_vote == CLASS_NOT_SET) {
                  level_5_6.apply();
        } } } } }

        meta.node_id6 = 179;
        meta.prevFeature6 = 0;
        meta.isTrue6 = 1;
        level_6_1.apply();
        if (meta.th6 & 0b10000000000000000000000000000000 == 0) meta.isTrue6 = 1;
        else meta.isTrue6 = 0;
        if (meta.tree_6_vote == CLASS_NOT_SET) {
          level_6_2.apply();
          if (meta.th6 & 0b10000000000000000000000000000000 == 0) meta.isTrue6 = 1;
          else meta.isTrue6 = 0;
          if (meta.tree_6_vote == CLASS_NOT_SET) {
            level_6_3.apply();
            if (meta.th6 & 0b10000000000000000000000000000000 == 0) meta.isTrue6 = 1;
            else meta.isTrue6 = 0;
            if (meta.tree_6_vote == CLASS_NOT_SET) {
              level_6_4.apply();
              if (meta.th6 & 0b10000000000000000000000000000000 == 0) meta.isTrue6 = 1;
              else meta.isTrue6 = 0;
              if (meta.tree_6_vote == CLASS_NOT_SET) {
                level_6_5.apply();
                if (meta.th6 & 0b10000000000000000000000000000000 == 0) meta.isTrue6 = 1;
                else meta.isTrue6 = 0;
                if (meta.tree_6_vote == CLASS_NOT_SET) {
                  level_6_6.apply();
        } } } } }

        meta.node_id7 = 206;
        meta.prevFeature7 = 0;
        meta.isTrue7 = 1;
        level_7_1.apply();
        if (meta.th7 & 0b10000000000000000000000000000000 == 0) meta.isTrue7 = 1;
        else meta.isTrue7 = 0;
        if (meta.tree_7_vote == CLASS_NOT_SET) {
          level_7_2.apply();
          if (meta.th7 & 0b10000000000000000000000000000000 == 0) meta.isTrue7 = 1;
          else meta.isTrue7 = 0;
          if (meta.tree_7_vote == CLASS_NOT_SET) {
            level_7_3.apply();
            if (meta.th7 & 0b10000000000000000000000000000000 == 0) meta.isTrue7 = 1;
            else meta.isTrue7 = 0;
            if (meta.tree_7_vote == CLASS_NOT_SET) {
              level_7_4.apply();
              if (meta.th7 & 0b10000000000000000000000000000000 == 0) meta.isTrue7 = 1;
              else meta.isTrue7 = 0;
              if (meta.tree_7_vote == CLASS_NOT_SET) {
                level_7_5.apply();
                if (meta.th7 & 0b10000000000000000000000000000000 == 0) meta.isTrue7 = 1;
                else meta.isTrue7 = 0;
                if (meta.tree_7_vote == CLASS_NOT_SET) {
                  level_7_6.apply();
        } } } } }

        meta.node_id8 = 249;
        meta.prevFeature8 = 0;
        meta.isTrue8 = 1;
        level_8_1.apply();
        if (meta.th8 & 0b10000000000000000000000000000000 == 0) meta.isTrue8 = 1;
        else meta.isTrue8 = 0;
        if (meta.tree_8_vote == CLASS_NOT_SET) {
          level_8_2.apply();
          if (meta.th8 & 0b10000000000000000000000000000000 == 0) meta.isTrue8 = 1;
          else meta.isTrue8 = 0;
          if (meta.tree_8_vote == CLASS_NOT_SET) {
            level_8_3.apply();
            if (meta.th8 & 0b10000000000000000000000000000000 == 0) meta.isTrue8 = 1;
            else meta.isTrue8 = 0;
            if (meta.tree_8_vote == CLASS_NOT_SET) {
              level_8_4.apply();
              if (meta.th8 & 0b10000000000000000000000000000000 == 0) meta.isTrue8 = 1;
              else meta.isTrue8 = 0;
              if (meta.tree_8_vote == CLASS_NOT_SET) {
                level_8_5.apply();
                if (meta.th8 & 0b10000000000000000000000000000000 == 0) meta.isTrue8 = 1;
                else meta.isTrue8 = 0;
                if (meta.tree_8_vote == CLASS_NOT_SET) {
                  level_8_6.apply();
        } } } } }

        meta.node_id9 = 282;
        meta.prevFeature9 = 0;
        meta.isTrue9 = 1;
        level_9_1.apply();
        if (meta.th9 & 0b10000000000000000000000000000000 == 0) meta.isTrue9 = 1;
        else meta.isTrue9 = 0;
        if (meta.tree_9_vote == CLASS_NOT_SET) {
          level_9_2.apply();
          if (meta.th9 & 0b10000000000000000000000000000000 == 0) meta.isTrue9 = 1;
          else meta.isTrue9 = 0;
          if (meta.tree_9_vote == CLASS_NOT_SET) {
            level_9_3.apply();
            if (meta.th9 & 0b10000000000000000000000000000000 == 0) meta.isTrue9 = 1;
            else meta.isTrue9 = 0;
            if (meta.tree_9_vote == CLASS_NOT_SET) {
              level_9_4.apply();
              if (meta.th9 & 0b10000000000000000000000000000000 == 0) meta.isTrue9 = 1;
              else meta.isTrue9 = 0;
              if (meta.tree_9_vote == CLASS_NOT_SET) {
                level_9_5.apply();
                if (meta.th9 & 0b10000000000000000000000000000000 == 0) meta.isTrue9 = 1;
                else meta.isTrue9 = 0;
                if (meta.tree_9_vote == CLASS_NOT_SET) {
                  level_9_6.apply();
        } } } } }

        decision.apply();
        send(ig_intr_md.ingress_port);
    }
}
/*************************************************************************
*********************** egress Processing********************************
**************************************************************************/

control SwitchEgress(inout header_t hdr,
    inout metadata_t meta,
    in egress_intrinsic_metadata_t eg_intr_md,
    in egress_intrinsic_metadata_from_parser_t eg_prsr_md,
    inout egress_intrinsic_metadata_for_deparser_t     eg_dprsr_md,
    inout egress_intrinsic_metadata_for_output_port_t  eg_oport_md) {

    action drop() {
        eg_dprsr_md.drop_ctl = 0x1;
    }

    apply {
    }
}
/*************************************************************************
***********************  S W I T C H  ************************************
*************************************************************************/

Pipeline(SwitchIngressParser(),
    SwitchIngress(),
    SwitchIngressDeparser(),
    SwitchEgressParser(),
    SwitchEgress(),
    SwitchEgressDeparser()) pipe;

Switch(pipe) main;